{"version":3,"file":"static/js/733.f7f795b2.chunk.js","mappings":"iMAGaA,EAAkB,CAC7BC,O,imGACAC,KAAM,OACNC,SAAU,aACVC,YACE,kHAGSC,EAAW,CACtBJ,O,y5FACAC,KAAM,OACNC,SAAU,aACVC,YACE,8I,gJCZSE,EAAUC,EAAAA,GAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,0CAKpBC,EAAkBH,EAAAA,GAAAA,IAAUI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,4NAEnBG,EAAAA,EAAAA,OAAAA,OACIC,GAQbC,EAAQP,EAAAA,GAAAA,IAAUQ,IAAAA,GAAAN,EAAAA,EAAAA,GAAA,8D,wGCflBH,EAAUC,EAAAA,GAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,kFAGXG,EAAAA,EAAAA,OAAAA,OAGTI,EAAeT,EAAAA,GAAAA,IAAUI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,kCAIzBQ,EAAOV,EAAAA,GAAAA,EAAQQ,IAAAA,GAAAN,EAAAA,EAAAA,GAAA,2IACbG,EAAAA,EAAAA,UAAAA,EACEA,EAAAA,EAAAA,WAAAA,OAGNA,EAAAA,EAAAA,OAAAA,OAIEM,EAAcX,EAAAA,GAAAA,IAAUY,IAAAA,GAAAV,EAAAA,EAAAA,GAAA,kCASxBW,EAAeb,EAAAA,GAAAA,IAAUc,IAAAA,GAAAZ,EAAAA,EAAAA,GAAA,keASrBG,EAAAA,EAAAA,UAAAA,GACJA,EAAAA,EAAAA,OAAAA,MACMA,EAAAA,EAAAA,WAAAA,QAGX,SAAAU,GAAK,OACLA,EAAMC,SACFX,EAAAA,EAAAA,OAAAA,IACAU,EAAME,WACNZ,EAAAA,EAAAA,OAAAA,MACAA,EAAAA,EAAAA,OAAAA,SAAsB,GAIHA,EAAAA,EAAAA,WAGTA,EAAAA,EAAAA,OAAAA,OAIIA,EAAAA,EAAAA,OAAAA,KAKba,EAAYlB,EAAAA,GAAAA,IAAUmB,IAAAA,GAAAjB,EAAAA,EAAAA,GAAA,gKACxBG,EAAAA,EAAAA,OAAAA,IACIA,EAAAA,EAAAA,UAAAA,KACEA,EAAAA,EAAAA,WAAAA,QAOJe,EAAiBpB,EAAAA,GAAAA,IAAUqB,IAAAA,GAAAnB,EAAAA,EAAAA,GAAA,gKAC7BG,EAAAA,EAAAA,OAAAA,MACIA,EAAAA,EAAAA,UAAAA,KACEA,EAAAA,EAAAA,WAAAA,QAiBJiB,GAAmBtB,EAAAA,EAAAA,IAAOuB,EAAAA,IAAPvB,CAA6BwB,IAAAA,GAAAtB,EAAAA,EAAAA,GAAA,6IAMnDG,EAAAA,EAAAA,OAAAA,QAIGoB,GAAiBzB,EAAAA,EAAAA,IAAO0B,EAAAA,IAAP1B,CAAoB2B,IAAAA,GAAAzB,EAAAA,EAAAA,GAAA,6IAMxCG,EAAAA,EAAAA,OAAAA,QAIGuB,EAAgB5B,EAAAA,GAAAA,IAAU6B,IAAAA,GAAA3B,EAAAA,EAAAA,GAAA,iFAM1B4B,EAAc9B,EAAAA,GAAAA,IAAU+B,IAAAA,GAAA7B,EAAAA,EAAAA,GAAA,gGAQxB8B,GAAOhC,EAAAA,EAAAA,IAAOiC,EAAAA,GAAPjC,CAAekC,IAAAA,GAAAhC,EAAAA,EAAAA,GAAA,kGACxBG,EAAAA,EAAAA,OAAAA,OACWA,EAAAA,EAAAA,WAITA,EAAAA,EAAAA,OAAAA,OAIA8B,EAAcnC,EAAAA,GAAAA,IAAUoC,IAAAA,GAAAlC,EAAAA,EAAAA,GAAA,sMAKtBG,EAAAA,EAAAA,UAAAA,IACEA,EAAAA,EAAAA,WAAAA,OAGNA,EAAAA,EAAAA,OAAAA,Y,oBCnJEgC,EAAcC,EAAAA,KAAaC,MAAM,CAC5CC,MAAOF,EAAAA,KAEJG,QALS,+CAKM,CAAEC,QAAS,+BAC1BC,SAAS,qBACZC,SAAUN,EAAAA,KAAaO,IAAI,GAAGF,SAAS,c,wCCkBnCG,EAAgB,CACpBN,MAAO,GACPI,SAAU,IAGCG,EAAY,WACvB,IAAAC,GAAkDC,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA1DI,EAAiBF,EAAA,GAAEG,EAAoBH,EAAA,GAWxCI,EAAuB,WAC3BD,GAAqB,SAAAE,GAAS,OAAKA,CAAS,GAC9C,EAQA,OACEC,EAAAA,EAAAA,MAACzD,EAAO,CAAA0D,SAAA,EACNC,EAAAA,EAAAA,KAACjD,EAAY,CAAAgD,UACXC,EAAAA,EAAAA,KAACC,EAAAA,GAAK,CAAChE,KAAM,cAEf+D,EAAAA,EAAAA,KAAChD,EAAI,CAAA+C,SAAC,sEAGNC,EAAAA,EAAAA,KAACE,EAAAA,GAAM,CACLd,cAAeA,EACfe,SAtBe,WAAO,EAuBtBC,iBAAkBzB,EAAYoB,SAE7B,SAAAM,GAAeA,EAAZC,aAAH,IAAiBC,EAAMF,EAANE,OAAQC,EAAOH,EAAPG,QAAO,OAC/BV,EAAAA,EAAAA,MAAA,QAAAC,SAAA,EACED,EAAAA,EAAAA,MAAC7C,EAAW,CAAA8C,SAAA,EACVC,EAAAA,EAAAA,KAAC7C,EACD,CAAA4C,UAEED,EAAAA,EAAAA,MAAA,SAAAC,SAAA,EACEC,EAAAA,EAAAA,KAACS,EAAAA,GAAK,CAACC,KAAK,QAAQzE,KAAK,QAAQ0E,YAAY,YAI7CX,EAAAA,EAAAA,KAACY,EAAAA,GAAY,CAAC3E,KAAK,QAAQ4E,UAAWrD,UAI1CwC,EAAAA,EAAAA,KAAC7C,EAED,CAAA4C,UAEED,EAAAA,EAAAA,MAAA,SAAAC,SAAA,EACEC,EAAAA,EAAAA,KAACS,EAAAA,GAAK,CACJC,KAAMhB,EAAoB,OAAS,WACnCzD,KAAK,WACL0E,YAAY,cAEbjB,GACCM,EAAAA,EAAAA,KAACjC,EAAc,CAAC+C,QAASlB,KAEzBI,EAAAA,EAAAA,KAACpC,EAAgB,CAACkD,QAASlB,IAQ5BY,EAAQtB,WAAaqB,EAAOrB,WAC3Bc,EAAAA,EAAAA,KAACtC,EAAc,CAAAqC,SAAC,uBAEjBS,EAAQtB,WAAaqB,EAAOrB,WAC3Bc,EAAAA,EAAAA,KAAC5B,EAAW,CAAA2B,UACVC,EAAAA,EAAAA,KAAA,OAAKe,KAAMC,EAAAA,EAAS,mBAGxBhB,EAAAA,EAAAA,KAACY,EAAAA,GAAY,CAAC3E,KAAK,WAAW4E,UAAWrD,aAI/CwC,EAAAA,EAAAA,KAAC9B,EAAa,CAAA6B,UACZC,EAAAA,EAAAA,KAACiB,EAAAA,GAGC,CACAP,KAAM,SACNX,SACD,eAIE,KAGXD,EAAAA,EAAAA,MAACrB,EAAW,CAAAsB,SAAA,EACVC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,iCACHC,EAAAA,EAAAA,KAAC1B,EAAI,CAAC4C,GAAG,YAAWnB,SAAC,kBAI7B,ECjHA,GAfc,WACZ,OACEC,EAAAA,EAAAA,KAACmB,EAAAA,GAAS,CAAApB,UACRD,EAAAA,EAAAA,MAACzD,EAAO,CAAA0D,SAAA,EAEND,EAAAA,EAAAA,MAACrD,EAAe,CAAAsD,SAAA,EACdC,EAAAA,EAAAA,KAACnD,EAAK,CAACuE,IAAKC,EAAUC,IAAI,QACzBlF,EAAAA,IAAY4D,EAAAA,EAAAA,KAACuB,EAAAA,GAAO,CAACC,IAAKpF,EAAAA,QAE7B4D,EAAAA,EAAAA,KAACX,EAAS,QAIlB,C","sources":["constants/pets.ts","pages/login/login.styled.ts","pages/login/components/loginForm/loginForm.styled.ts","pages/login/components/loginForm/loginShema.ts","pages/login/components/loginForm/loginForm.tsx","pages/login/login.tsx"],"sourcesContent":["import registrationAvatar from 'assets/images/registrationAvatar.png';\nimport loginAvatar from 'assets/images/loginAvatar.png';\n\nexport const registrationPet = {\n  avatar: registrationAvatar,\n  name: 'Jack',\n  birthday: '18.10.2021',\n  description:\n    'Jack is a gray Persian cat with green eyes. He loves to be pampered and groomed, and enjoys playing with toys.',\n};\n\nexport const loginPet = {\n  avatar: loginAvatar,\n  name: 'Rich',\n  birthday: '21.09.2020',\n  description:\n    'Rich would be the perfect addition to an active family that loves to play and go on walks. I bet he would love having a doggy playmate too!',\n};","import styled from 'styled-components';\nimport { theme } from 'constants/theme';\nimport rectangle from 'assets/images/rectangle.png';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  gap: 32px;\n`;\n\nexport const PetBlockWrapper = styled.div`\n  position: relative;\n  background-color: ${theme.colors.accent};\n  background-image: url(${rectangle});\n  background-repeat: no-repeat;\n  background-position: center bottom;\n  width: 592px;\n  height: 654px;\n  border-radius: 60px;\n`;\n\nexport const Image = styled.img`\n  position: absolute;\n  bottom: 0;\n  left: 30px;\n`;","import { theme } from 'constants/theme';\nimport styled from 'styled-components';\nimport { AiOutlineEyeInvisible, AiOutlineEye } from 'react-icons/ai';\nimport { NavLink } from 'react-router-dom';\n\nexport const Wrapper = styled.div`\n  padding: 77px 84px;\n  border-radius: 60px;\n  background-color: ${theme.colors.white};\n`;\n\nexport const TitleWrapper = styled.div`\n  margin-bottom: 16px;\n`;\n\nexport const Text = styled.p`\n  font-size: ${theme.fontSizes.s};\n  font-weight: ${theme.fontWeight.medium};\n  line-height: 1.222;\n  letter-spacing: -0.16px;\n  color: ${theme.colors.black};\n  margin-bottom: 32px;\n`;\n\nexport const FormWrapper = styled.div`\n  margin-bottom: 16px;\n`;\n\ninterface InputWrapperProps {\n    haserror?: boolean;\n    hassuccess?: boolean;\n  }\n\nexport const InputWrapper = styled.div<InputWrapperProps>`\n  margin-bottom: 16px;\n  max-width: 424px;\n  position: relative;\n  width: 100%;\n\n  input {\n    width: 100%;\n    padding: 16px;\n    font-size: ${theme.fontSizes.xs};\n    color: ${theme.colors.black};\n    font-weight: ${theme.fontWeight.medium};\n    line-height: 1.25;\n    border: 1px solid\n      ${props =>\n        props.haserror\n          ? theme.colors.red\n          : props.hassuccess\n          ? theme.colors.green\n          : theme.colors.lightGrey};\n    border-radius: 30px;\n    box-sizing: border-box;\n    outline: none;\n    transition: border-color ${theme.transition};\n\n    &:focus {\n      border-color: ${theme.colors.accent};\n    }\n\n    .error {\n      border: 1px solid ${theme.colors.red};\n    }\n  }\n`;\n\nexport const ErrorText = styled.div`\n  color: ${theme.colors.red};\n  font-size: ${theme.fontSizes.xxxs};\n  font-weight: ${theme.fontWeight.medium};\n  line-height: 1.1667;\n  letter-spacing: -0.36px;\n  margin-top: 4px;\n  margin-bottom: 12px;\n`;\n\nexport const SuccessMessage = styled.div`\n  color: ${theme.colors.green};\n  font-size: ${theme.fontSizes.xxxs};\n  font-weight: ${theme.fontWeight.medium};\n  line-height: 1.1667;\n  letter-spacing: -0.36px;\n  margin-top: 4px;\n  margin-bottom: 12px;\n`;\n\n// export const ErrorIcon = styled.span`\n//   position: absolute;\n//   top: 15px;\n//   right: ${props => (props.erroriconright ? '50px' : '16px')};\n//   font-size: 22px;\n//   font-size: ${theme.fontWeight.bold};\n//   color: ${theme.colors.red};\n//   display: ${props => (props.haserror ? 'block' : 'none')};\n// `;\n\nexport const EyeIconInvisible = styled(AiOutlineEyeInvisible)`\n  position: absolute;\n  top: 26px;\n  right: 16px;\n  width: 22px;\n  height: 22px;\n  fill: ${theme.colors.accent};\n  transform: translateY(-50%);\n`;\n\nexport const EyeIconVisible = styled(AiOutlineEye)`\n  position: absolute;\n  top: 26px;\n  right: 16px;\n  width: 22px;\n  height: 22px;\n  fill: ${theme.colors.accent};\n  transform: translateY(-50%);\n`;\n\nexport const ButtonWrapper = styled.div`\n  display: inline-block;\n  margin-top: 16px;\n  margin-bottom: 48px;\n`;\n\nexport const SuccessIcon = styled.svg`\n  position: absolute;\n  top: 15px;\n  right: 50px;\n  width: 22px;\n  height: 22px;\n`;\n\nexport const Link = styled(NavLink)`\n  color: ${theme.colors.accent};\n  transition: color ${theme.transition};\n\n  &:hover,\n  :focus {\n    color: ${theme.colors.beige};\n  }\n`;\n\nexport const LinkWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  gap: 4px;\n  font-size: ${theme.fontSizes.xxs};\n  font-weight: ${theme.fontWeight.medium};\n  line-height: 1.428;\n  letter-spacing: -0.42px;\n  color: ${theme.colors.mediumGrey};\n`;","import * as yup from 'yup';\n\nconst regEx = /^[\\w-]+(\\.[\\w-]+)*@([\\w-]+\\.)+[a-zA-Z]{2,7}$/;\n\nexport const LoginSchema = yup.object().shape({\n  email: yup\n    .string()\n    .matches(regEx, { message: 'Please enter a valid email' })\n    .required('Email is required'),\n  password: yup.string().min(7).required('Required'),\n});","import {\n  ButtonWrapper,\n  //   ErrorIcon,\n  ErrorText,\n  EyeIconInvisible,\n  EyeIconVisible,\n  FormWrapper,\n  InputWrapper,\n  Link,\n  LinkWrapper,\n  SuccessIcon,\n  SuccessMessage,\n  Text,\n  TitleWrapper,\n  Wrapper,\n} from './loginForm.styled';\nimport { Formik, Field, ErrorMessage } from 'formik';\nimport { LoginSchema } from './loginShema';\nimport { useState } from 'react';\nimport sprite from 'assets/sprite.svg';\nimport { Button, Title } from 'ui';\n\n// import { useDispatch } from 'react-redux';\n// import { logIn } from '../../redux/auth/authOperation';\n// import { useNavigate } from 'react-router-dom';\n// import { selectIsLoggedIn } from '../../redux/auth/authSelectors';\n\nconst initialValues = {\n  email: '',\n  password: '',\n};\n\nexport const LoginForm = () => {\n  const [isPasswordVisible, setIsPasswordVisible] = useState(false);\n  // const navigate = useNavigate();\n  // const dispatch = useDispatch();\n  //   const isLoggedIn = useSelector(selectIsLoggedIn);\n\n  //   const handleSubmit = ({ email, password }, { resetForm }) => {\n  //     dispatch(logIn({ email, password }));\n  //     resetForm();\n  //   };\n  const handleSubmit = () => {};\n\n  const handleTogglePassword = () => {\n    setIsPasswordVisible(prevState => !prevState);\n  };\n\n  //   useEffect(() => {\n  //     if (isLoggedIn) {\n  //       navigate('/profile');\n  //     }\n  //   }, [navigate, isLoggedIn]);\n\n  return (\n    <Wrapper>\n      <TitleWrapper>\n        <Title name={'Log in'} />\n      </TitleWrapper>\n      <Text>\n        Welcome! Please enter your credentials to login to the platform:\n      </Text>\n      <Formik\n        initialValues={initialValues}\n        onSubmit={handleSubmit}\n        validationSchema={LoginSchema}\n      >\n        {({ handleSubmit, errors, touched }) => (\n          <form>\n            <FormWrapper>\n              <InputWrapper\n              //   haserror={touched.email && errors.email}\n              >\n                <label>\n                  <Field type=\"email\" name=\"email\" placeholder=\" Email\" />\n                  {/* <ErrorIcon haserror={touched.email && errors.email}>\n                    ✕\n                  </ErrorIcon> */}\n                  <ErrorMessage name=\"email\" component={ErrorText} />\n                </label>\n              </InputWrapper>\n\n              <InputWrapper\n              // haserror={touched.password && errors.password}\n              // hassuccess={touched.password && !errors.password}\n              >\n                <label>\n                  <Field\n                    type={isPasswordVisible ? 'text' : 'password'}\n                    name=\"password\"\n                    placeholder=\" Password\"\n                  />\n                  {isPasswordVisible ? (\n                    <EyeIconVisible onClick={handleTogglePassword} />\n                  ) : (\n                    <EyeIconInvisible onClick={handleTogglePassword} />\n                  )}\n                  {/* <ErrorIcon\n                    haserror={touched.password && errors.password}\n                    erroriconright=\"true\"\n                  >\n                    ✕\n                  </ErrorIcon> */}\n                  {touched.password && !errors.password && (\n                    <SuccessMessage>Password is secure</SuccessMessage>\n                  )}\n                  {touched.password && !errors.password && (\n                    <SuccessIcon>\n                      <use href={sprite + '#icon-check'}></use>\n                    </SuccessIcon>\n                  )}\n                  <ErrorMessage name=\"password\" component={ErrorText} />\n                </label>\n              </InputWrapper>\n            </FormWrapper>\n            <ButtonWrapper>\n              <Button\n                // padding={'16px 186px'}\n                // width={'424px'}\n                // height={'52px'}\n                type={'submit'}\n                // handleClick={handleSubmit}\n              >\n                LOG IN\n              </Button>\n            </ButtonWrapper>\n          </form>\n        )}\n      </Formik>\n      <LinkWrapper>\n        <p>Don’t have an account?</p>\n        <Link to=\"/register\">Register</Link>\n      </LinkWrapper>\n    </Wrapper>\n  );\n};\n","import { Image, PetBlockWrapper, Wrapper } from './login.styled';\nimport loginImg from 'assets/images/loginImg.png';\nimport { loginPet } from 'constants/pets';\nimport { PetInfo } from 'components';\nimport { LoginForm } from './components/loginForm';\nimport { Container } from 'ui';\n\nconst Login = () => {\n  return (\n    <Container>\n      <Wrapper>\n        {/* <PetBlock img={loginImg} pet={loginPet} /> */}\n        <PetBlockWrapper>\n          <Image src={loginImg} alt=\"Pet\" />\n          {loginPet && <PetInfo pet={loginPet} />}\n        </PetBlockWrapper>\n        <LoginForm />\n      </Wrapper>\n    </Container>\n  );\n};\n\nexport default Login;\n"],"names":["registrationPet","avatar","name","birthday","description","loginPet","Wrapper","styled","_templateObject","_taggedTemplateLiteral","PetBlockWrapper","_templateObject2","theme","rectangle","Image","_templateObject3","TitleWrapper","Text","FormWrapper","_templateObject4","InputWrapper","_templateObject5","props","haserror","hassuccess","ErrorText","_templateObject6","SuccessMessage","_templateObject7","EyeIconInvisible","AiOutlineEyeInvisible","_templateObject8","EyeIconVisible","AiOutlineEye","_templateObject9","ButtonWrapper","_templateObject10","SuccessIcon","_templateObject11","Link","NavLink","_templateObject12","LinkWrapper","_templateObject13","LoginSchema","yup","shape","email","matches","message","required","password","min","initialValues","LoginForm","_useState","useState","_useState2","_slicedToArray","isPasswordVisible","setIsPasswordVisible","handleTogglePassword","prevState","_jsxs","children","_jsx","Title","Formik","onSubmit","validationSchema","_ref","handleSubmit","errors","touched","Field","type","placeholder","ErrorMessage","component","onClick","href","sprite","Button","to","Container","src","loginImg","alt","PetInfo","pet"],"sourceRoot":""}